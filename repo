#!/bin/bash
#title           :repo
#description     :
#author          :thulin82
#date            :20170801
#version         :0.1
#usage           :Run from git root folder
#notes           :

# Name of the script
SCRIPT=$( basename "$0" )
FOLDERS="$(pwd)/*"

# Current version
VERSION="1.0.0"

# Colors
NC='\033[0m'          # No Color
RED='\033[31;01m'     # Red
GREEN='\033[32;01m'   # Green
YELLOW='\033[33;01m'  # Yellow


#
# Message to display for usage and help.
#
function usage
{
    local txt=(
"Utility $SCRIPT for doing stuff."
"Usage: $SCRIPT [options] <command> [arguments]"
""
"Command:"
"  check                  Check if the folders are local repos."
"  status                 Run git status on every repo."
"  pull                   Run git pull on every repo."
"  remote                 Run git git remote get-url origin on every repo."
"  diff [branch] [branch] Check diff between to local/remote branches."
"  default [anything]     Default behaviour."
""
"Options:"
"  --help, -h             Print help."
"  --version, -v          Print version."
    )
    
    printf "%s\n" "${txt[@]}"
}


#
# Message to display when bad usage.
#
function badUsage
{
    local message="$1"
    local txt=(
"For an overview of the command, execute:"
"$SCRIPT --help"
    )
    
    [[ $message ]] && printf "$message\n"

    printf "%s\n" "${txt[@]}"
}


#
# Message to display for version.
#
function version
{
    local txt=(
"$SCRIPT version $VERSION"
    )

    printf "%s\n" "${txt[@]}"
}


#
# Default function structure for viewing arguments
#
function app-default
{
    echo "This is output from app-default."
    echo "App-default takes additional arguments which currently are:"
    echo " Number of arguments = '$#'"
    echo " List of arguments = '$*'"
}


#
# Function for checking if folders contain a git repo or not
#
function app-check
{
    for dir in $FOLDERS; do
        if [ -d "$dir" ]; then
            repo=$(basename "$dir");
            status="Not a git repo";
            color="${RED}%-18s"
            nocolor="${NC}%s"
            if [ -d "$dir/.git" ]; then
                status="A git repository";
                color="${GREEN}%-18s"
            fi
            printf "$color $nocolor\n" "$status" "$repo";
        fi
    done
}


#
# Function for running "git fetch" followed by "git status" in folders
#
function app-status
{
    for dir in $FOLDERS; do
        if [ -d "$dir/.git" ]; then
            repo=$(basename "$dir");
            echo -e "${YELLOW}$repo${NC}"
            cd $repo && git fetch && git status -sb && cd .. || cd ..
        fi
    done
}


#
# Function for running "git pull" in folders
#
function app-pull
{
    for dir in $FOLDERS; do
        if [ -d "$dir" ]; then
            repo=$(basename "$dir");
            echo -e "${RED}$repo${NC}"
            cd $repo && git pull && cd .. || cd ..
        fi
    done
}


#
# Function for running "git remote get-url origin" in folders
#
function app-remote
{
    for dir in $FOLDERS; do
        if [ -d "$dir/.git" ]; then
            repo=$(basename "$dir");
            echo -en "${YELLOW}$repo:${NC} "
            cd $repo && git remote get-url origin && cd .. || cd ..
        fi
    done
}

#
# Function for checking the commit differences between two branches (local or remote)
# $1: First branch
# $2: Second branch
#
function app-diff
{
    ARGS="$1...$2"
    for dir in $FOLDERS; do
        if [ -d "$dir" ]; then
            repo=$(basename "$dir");
            echo -e "${RED}$repo${NC}"
            cd $repo && git fetch && git log --decorate --left-right --oneline $ARGS && cd .. || cd ..
        fi
    done
}


#
# Process options
#
while (( $# ))
do
    case "$1" in

        --help | -h)
            usage
            exit 0
        ;;

        --version | -v)
            version
            exit 0
        ;;

        check | status | pull | remote | diff | default)
            command=$1
            shift
            app-$command $*
            exit 0
        ;;

        *)
            badUsage "Option/command not recognized"
            exit 1
    esac
done

badUsage
exit 1
